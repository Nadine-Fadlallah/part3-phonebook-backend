{"version":3,"sources":["components/Contacts.js","components/Form.js","components/Filter.js","services/Persons.js","components/Notification.js","components/Error.js","App.js","index.js"],"names":["Contacts","name","number","onClick","Form","onSubmit","onNameChange","onNumberChange","value","onChange","type","Filter","fieldName","baseUrl","axios","get","then","response","data","newObject","post","id","delete","updatedObj","put","notificationStyle","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","Notification","message","style","Error","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","search","setNewSearch","notification","setNewNotification","errorMessage","setNewErrorMessage","useEffect","personService","initialPersons","console","log","contacts","length","filter","person","s1","s2","toLowerCase","includes","event","target","preventDefault","repeatedNamePerson","find","repeatedNumberPerson","window","alert","confirm","changedPerson","updatedPerson","map","catch","error","setTimeout","addedPerson","concat","key","deletedPerson","filteredPersons","handleDelete","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8275615c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Contacts = ({ name, number, onClick }) => {\r\n  return (\r\n    <>\r\n      <div>\r\n        {name} {number}\r\n        <button onClick={onClick}>delete</button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Contacts;\r\n","import React from \"react\";\r\n\r\nconst Form = ({ onSubmit, name, number, onNameChange, onNumberChange }) => {\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit}>\r\n        <div>\r\n          name: <input value={name} onChange={onNameChange} />\r\n        </div>\r\n        <div>\r\n          number: <input value={number} onChange={onNumberChange} />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Filter = ({ fieldName, onChange }) => {\r\n  return (\r\n    <>\r\n      <form>\r\n        <div>\r\n          filter shown with\r\n          <input value={fieldName} onChange={onChange} />\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\nexport default Filter;\r\n","import axios from \"axios\";\r\nconst baseUrl = 'np/api/persons';\r\n\r\n// returns all the persons' data in our backend\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl);\r\n    return request.then((response) => response.data);\r\n};\r\n\r\n// return the added person's data in our backend\r\nconst create = (newObject) => {\r\n    const request = axios.post(baseUrl, newObject);\r\n    return request.then((response) => response.data);\r\n};\r\n\r\nconst deleteContact = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request\r\n}\r\n\r\n// return the updated person's data\r\nconst update = (id, updatedObj) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, updatedObj)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, deleteContact, update };\r\n","import React from \"react\";\r\nconst notificationStyle = {\r\n  color: \"green\",\r\n  background: \"lightgrey\",\r\n  fontSize: 20,\r\n  borderStyle: \"solid\",\r\n  borderRadius: 5,\r\n  padding: 10,\r\n  marginBottom: 10,\r\n};\r\n\r\nconst Notification = ({ message, type }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n\r\n  return <div style={notificationStyle}>{message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import React from \"react\";\r\nconst notificationStyle = {\r\n  color: \"red\",\r\n  background: \"lightgrey\",\r\n  fontSize: 20,\r\n  borderStyle: \"solid\",\r\n  borderRadius: 5,\r\n  padding: 10,\r\n  marginBottom: 10,\r\n};\r\n\r\nconst Error = ({ message }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n\r\n  return <div style={notificationStyle}>{message}</div>;\r\n};\r\n\r\nexport default Error;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Contacts from \"./components/Contacts\";\r\nimport Form from \"./components/Form\";\r\nimport Filter from \"./components/Filter\";\r\nimport personService from \"./services/Persons\";\r\nimport Notification from \"./components/Notification\";\r\nimport Error from \"./components/Error\";\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([]);\r\n\r\n  const [newName, setNewName] = useState(\"\");\r\n  const [newNumber, setNewNumber] = useState(\"\");\r\n\r\n  const [search, setNewSearch] = useState(\"\");\r\n\r\n  const [notification, setNewNotification] = useState(null);\r\n\r\n  const [errorMessage, setNewErrorMessage] = useState(null);\r\n\r\n  //---------------------------- FETCHING CONTACTS FROM THE SERVER ----------------------------//\r\n  useEffect(() => {\r\n    personService.getAll().then((initialPersons) => {\r\n      console.log(\"response fullfied\");\r\n      setPersons(initialPersons);\r\n    });\r\n  }, []);\r\n\r\n  //---------------------------- ADDING A NEW CONTACT / MODIFYING AN EXISTING ONE ----------------------------//\r\n  const addContact = (event) => {\r\n    event.preventDefault();\r\n\r\n    const repeatedNamePerson = persons.find(\r\n      (person) => person.name === newName\r\n    ); //returns the person that matches the entered name\r\n\r\n    const repeatedNumberPerson = persons.find(\r\n      (person) => person.number === newNumber\r\n    ); //returns the person that matches the entered number\r\n\r\n    // Check for no repeated field(s)\r\n    if (!(repeatedNamePerson || repeatedNumberPerson)) {\r\n      // Check for no empty field(s)\r\n      if (!(newName && newNumber)) {\r\n        // show an alert message in case of empty input(s) & don't clear that field\r\n        window.alert(\"Please fill the missing contact info!\");\r\n        return;\r\n      }\r\n\r\n      const personObj = {\r\n        name: newName,\r\n        number: newNumber,\r\n      };\r\n      personService\r\n        .create(personObj)\r\n        .then((addedPerson) => setPersons(persons.concat(addedPerson)));\r\n\r\n      // Shows a notification message for 5 secs\r\n      setNewNotification(`Added ${newName}`);\r\n      setTimeout(() => {\r\n        setNewNotification(null);\r\n      }, 5000);\r\n    }\r\n\r\n    // In case of a repeated name or/and number\r\n    else {\r\n      //const errorAlert = False;\r\n      // Here I have a person with a repeated name and a new number\r\n      if (!repeatedNumberPerson) {\r\n        // && repeatedName)\r\n\r\n        // So I'm asking if he wants the contact to be modified\r\n        if (\r\n          window.confirm(\r\n            `${repeatedNamePerson.name} is already added to phonebook, replace the old number with a new one?`\r\n          )\r\n        ) {\r\n          // If yes, I'll make a new changed contact with the new number entered\r\n          const changedPerson = { ...repeatedNamePerson, number: newNumber };\r\n\r\n          // then I'll update the backend and webpage with our modified contact\r\n          personService\r\n            .update(changedPerson.id, changedPerson)\r\n            .then((\r\n              updatedPerson //console.log(updatedPerson)\r\n            ) =>\r\n              setPersons(\r\n                persons.map((person) =>\r\n                  person.id !== changedPerson.id ? person : updatedPerson\r\n                )\r\n              )\r\n            )\r\n            .catch((error) => {\r\n              // In case of an error caught(e.g., modifying a deleted contact), display an error alert for 5 secs\r\n              setNewErrorMessage(\r\n                `Information of ${changedPerson.name} has already been removed from server!!!`\r\n              );\r\n              setTimeout(() => {\r\n                setNewErrorMessage(null);\r\n              }, 5000);\r\n              // and remove that errory update from the webpage (webpage and backend are now consistent)\r\n              setPersons(\r\n                persons.filter((person) => person.id !== changedPerson.id)\r\n              );\r\n            });\r\n\r\n          // If no error is caught (update is successful), display a notification message for 5 secs\r\n          if (errorMessage) {\r\n            setNewNotification(`Modified ${changedPerson.name}`);\r\n            setTimeout(() => {\r\n              setNewNotification(null);\r\n            }, 5000);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Here I have a person with a repeated number with either an old or new name\r\n      else {\r\n        // So I'm displaying an alert that a name/number is repeated\r\n        window.alert(\r\n          `${\r\n            repeatedNamePerson !== repeatedNumberPerson ? newNumber : newName\r\n          } is already added to phonebook`\r\n        );\r\n      }\r\n    }\r\n\r\n    // When all is done, clear both fields\r\n    setNewName(\"\");\r\n    setNewNumber(\"\");\r\n  };\r\n\r\n  //---------------------------- DELETING A CONTACT ----------------------------//\r\n\r\n  const handleDelete = (deletedPerson) => {\r\n    if (window.confirm(`Delete ${deletedPerson.name} ?`)) {\r\n      personService.deleteContact(deletedPerson.id);\r\n\r\n      const filteredPersons = persons.filter(\r\n        (person) => person.id !== deletedPerson.id\r\n      );\r\n\r\n      setPersons(filteredPersons);\r\n    }\r\n  };\r\n\r\n  const handleNameChange = (event) => {\r\n    console.log(event.target.value);\r\n    setNewName(event.target.value);\r\n  };\r\n\r\n  const handleNumberChange = (event) => {\r\n    console.log(event.target.value);\r\n    setNewNumber(event.target.value);\r\n  };\r\n\r\n  const handleSearch = (event) => {\r\n    setNewSearch(event.target.value);\r\n  };\r\n\r\n  const isSubstring = (s1, s2) => {\r\n    return s1.toLowerCase().includes(s2.toLowerCase());\r\n  };\r\n\r\n  const contacts = search.length\r\n    ? persons.filter((person) => isSubstring(person.name, search))\r\n    : persons;\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n\r\n      {/* Notification */}\r\n      <Notification message={notification} />\r\n\r\n      {/* Error */}\r\n      <Error message={errorMessage} />\r\n\r\n      {/* Filter field */}\r\n      <Filter fieldName={search} onChange={handleSearch} />\r\n\r\n      <h3>Add a new</h3>\r\n\r\n      {/* Contacts field */}\r\n      <Form\r\n        onSubmit={addContact}\r\n        name={newName}\r\n        number={newNumber}\r\n        onNameChange={handleNameChange}\r\n        onNumberChange={handleNumberChange}\r\n      />\r\n\r\n      <h3>Numbers</h3>\r\n\r\n      <div>\r\n        {contacts.map((person) => (\r\n          <Contacts\r\n            key={person.id}\r\n            name={person.name}\r\n            number={person.number}\r\n            onClick={() => handleDelete(person)}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}